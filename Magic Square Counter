#include<iostream>
#include<time.h>
using namespace std;
int nums[100][100], num;
int count1=1;
int magicNum;
//Output the current square
void printResult1(){
		cout << "No." << count1 <<endl;
		count1++;
		for(int i = 0; i < num; i++){
			for(int j = 0; j < num; j++){
				cout<<nums[i][j]<<" ";
			}
			cout<<endl;
		}
		cout<<"-------------------------"<<endl;
		
	}
void printResult2(){
	    char file[30] = "result.txt";
	    FILE *fp;
	    fp = fopen(file, "a+");
	    fprintf(fp, "No. %d\n", count1);
		
		count1++;
		for(int i = 0; i < num; i++){
			for(int j = 0; j < num; j++){
				
				fprintf(fp, "%d ", nums[i][j]);
			}
			fprintf(fp, "\n");
		}
		
		fprintf(fp, "-------------------------\n");
		fclose(fp);
		
	}
//check the diagonal
bool checkDiagonal(){
		int sum = 0;
		int i;
		for(i = 0; i < num; i++){
			sum += nums[i][i];
		}
		if(sum != magicNum)
			return false;
		sum = 0;
		for(i = 0; i < num; i++){
			sum += nums[i][num - 1 - i];
		}
		if(sum != magicNum)
			return false;
		
		return true;
	}
//check one column of the square
bool checkColunn(int columnNum){
		int sum = 0;
		for(int i = 0; i < num; i++){

			sum += nums[i][columnNum];
		}
		if(sum != magicNum)
			return false;
		else
			return true;
	}
//check one row of the square
bool checkRow(int rowNum){
		int sum = 0; 
		for(int i = 0; i < num; i++){
			sum += nums[rowNum][i];
		}
		if(sum != magicNum)
			return false;
		else
			return true;
	}
//check
bool check(){
		for(int i = 0; i < num; i++){
			if(!checkRow(i) || !checkColunn(i))
				return false;
		}
		if(!checkDiagonal())
			return false;
		
		return true;
	}
//swap the two elements
void swap(int i, int j){
		int temp;
		temp = nums[i/num][i%num];
		nums[i/num][i%num] = nums[j/num][j%num];
		nums[j/num][j%num] = temp;
	}
	

//Arrange elements from 0 to 1
void arrange1(int n){
	//recursion boundary
		if(n == 1){
			if(check()){
				printResult1();
				return;
			}
		}
		//pruning
		else if(n % num == 0){
			int rowNum = n / num;
			if(rowNum > 0 && rowNum < num){
				if(!checkRow(rowNum))
					return;
			}
		}
		
		for(int i = 0; i < n; i++){
			swap(i, n - 1);
			arrange1(n - 1);
			swap(i, n - 1);
		}
	}
	
void arrange2(int n){
	// recursion boundary
		if(n == 1){
			if(check()){
				printResult2();
				return;
			}
		}
		//purn
		else if(n % num == 0){
			int rowNum = n / num;
			if(rowNum > 0 && rowNum < num){
				if(!checkRow(rowNum))
					return;
			}
		}
		
		for(int i = 0; i < n; i++){
			swap(i, n - 1);
			arrange2(n - 1);
			swap(i, n - 1);
		}
	}
int main()
{

	int k=1,in;
	time_t tstart,tend;
	cout<<"------------------------"<<endl;
	cout<<"| Magic Square Count  |"<<endl;
    cout<<"------------------------"<<endl;
	cout<<"Please inout the order of the square:"<<endl;
	cin>>num;
	cout << "Please select the type of the output"<<endl<<"1.Print on the screen;  2.Save to local file(result.txt)."<<endl;
	cin>>in;
	if(in==1)
	{
		for(int i=0;i<num;i++)
		for(int j=0;j<num;j++)
		{
			nums[i][j] = k;
			k++;
		}
		magicNum = (1 + num * num) * num / 2; 
		tstart = time(NULL);
    	arrange1(num * num);
    	tend = time(NULL);
    	//cout<<endl<<"Elapsed time =" << difftime(tend,tstart)<<endl;
    	printf("\nElapsed time = %1.4f",difftime(tend,tstart));
	}
	else
	{
		char file[30] = "result.txt";
	    FILE *fp;
	    fp = fopen(file, "w");
	    fclose(fp);
		for(int i=0;i<num;i++)
		for(int j=0;j<num;j++)
		{
			nums[i][j] = k;
			k++;
		}
		
		magicNum = (1 + num * num) * num / 2;
		arrange2(num * num);
	}
	system("pause");
	return 0;
}
